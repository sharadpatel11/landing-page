import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useNavigate } from 'react-router-dom';
import Prism from 'prismjs';
import 'prismjs/themes/prism-tomorrow.css';
import 'prismjs/plugins/line-numbers/prism-line-numbers.css';
import 'prismjs/plugins/line-numbers/prism-line-numbers.js';
import 'prismjs/components/prism-python';
import 'prismjs/components/prism-php';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-java';
import 'prismjs/components/prism-c';

interface Challenge {
  id: number;
  language: string;
  description: string;
  code: string;
  vulnerableLine: number;
  vulnerability: string;
  explanation: string;
}

interface GameState {
  currentChallengeIndex: number;
  score: number;
  totalChallenges: number;
  gameComplete: boolean;
  showFeedback: boolean;
  selectedLine: number | null;
  userAnswer: string | null;
  correctAnswer: boolean;
  attempts: number;
}

const CodeVulnerabilityAudit = () => {
  const navigate = useNavigate();
  const codeRef = useRef<HTMLPreElement>(null);

  const challenges: Challenge[] = [
    {
      id: 1,
      language: 'python',
      description: 'This Python Flask function retrieves a user\'s details from the database.',
      code: `@app.route('/user_profile')
def get_user_profile():
    user_id = request.args.get('id')
    db = get_db_connection()
    query = "SELECT * FROM users WHERE id = '" + user_id + "'"
    user_data = db.execute(query).fetchone()
    return render_template('profile.html', user=user_data)`,
      vulnerableLine: 5,
      vulnerability: 'SQL Injection',
      explanation: 'This line is vulnerable to SQL Injection. User input from `user_id` is directly concatenated into the SQL query, allowing an attacker to manipulate the query logic.'
    },
    {
      id: 2,
      language: 'php',
      description: 'This PHP script displays a welcome message with the user\'s name.',
      code: `<?php
  $username = $_GET['name'];
?>
<html>
  <body>
    <h1>Welcome, <?php echo $username; ?>!</h1>
  </body>
</html>`,
      vulnerableLine: 6,
      vulnerability: 'Cross-Site Scripting (XSS)',
      explanation: 'This line has a Reflected XSS vulnerability. The `username` parameter is printed directly to the HTML without sanitization, allowing an attacker to inject and execute malicious scripts in the user\'s browser.'
    },
    {
      id: 3,
      language: 'javascript',
      description: 'This Node.js Express route serves files from the uploads directory.',
      code: `app.get('/download/:filename', (req, res) => {
    const filename = req.params.filename;
    const filepath = path.join(__dirname, 'uploads', filename);
    
    if (fs.existsSync(filepath)) {
        res.download(filepath);
    } else {
        res.status(404).send('File not found');
    }
});`,
      vulnerableLine: 3,
      vulnerability: 'Path Traversal',
      explanation: 'This line is vulnerable to Path Traversal attacks. The filename parameter is not validated, allowing attackers to use "../" sequences to access files outside the uploads directory.'
    },
    {
      id: 4,
      language: 'java',
      description: 'This Java method processes user authentication.',
      code: `public boolean authenticateUser(String username, String password) {
    String query = "SELECT * FROM users WHERE username = '" + username + 
                   "' AND password = '" + password + "'";
    
    try (Statement stmt = connection.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {
        return rs.next();
    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    }
}`,
      vulnerableLine: 2,
      vulnerability: 'SQL Injection',
      explanation: 'This line constructs a SQL query by concatenating user input directly, making it vulnerable to SQL Injection attacks. Additionally, passwords should be hashed, not stored in plaintext.'
    },
    {
      id: 5,
      language: 'c',
      description: 'This C function copies user input to a buffer.',
      code: `#include <string.h>
#include <stdio.h>

void process_input(char* user_input) {
    char buffer[64];
    strcpy(buffer, user_input);
    printf("Processing: %s\\n", buffer);
}`,
      vulnerableLine: 6,
      vulnerability: 'Buffer Overflow',
      explanation: 'This line uses strcpy() without bounds checking. If user_input is longer than 63 characters, it will overflow the buffer, potentially allowing code execution or crashes.'
    }
  ];

  const vulnerabilityOptions = [
    'SQL Injection',
    'Cross-Site Scripting (XSS)',
    'Path Traversal',
    'Buffer Overflow',
    'Insecure Direct Object Reference',
    'Command Injection'
  ];

  const [gameState, setGameState] = useState<GameState>({
    currentChallengeIndex: 0,
    score: 0,
    totalChallenges: challenges.length,
    gameComplete: false,
    showFeedback: false,
    selectedLine: null,
    userAnswer: null,
    correctAnswer: false,
    attempts: 0
  });

  const currentChallenge = challenges[gameState.currentChallengeIndex];

  useEffect(() => {
    if (codeRef.current) {
      // Clean up previous line numbers
      const existingManualLineNumbers = codeRef.current.parentElement?.querySelector('.manual-line-numbers');
      if (existingManualLineNumbers) {
        existingManualLineNumbers.remove();
        codeRef.current.style.paddingLeft = '1em';
      }
      
      Prism.highlightElement(codeRef.current);
      addLineClickHandlers();
    }

    // Cleanup function
    return () => {
      if (codeRef.current) {
        const existingManualLineNumbers = codeRef.current.parentElement?.querySelector('.manual-line-numbers');
        if (existingManualLineNumbers) {
          existingManualLineNumbers.remove();
        }
      }
    };
      }, [gameState.currentChallengeIndex, gameState.selectedLine]);

  const addLineClickHandlers = () => {
    if (!codeRef.current) return;

    // Try to find line numbers in the Prism structure
    const lineNumbersContainer = codeRef.current.querySelector('.line-numbers-rows');
    if (!lineNumbersContainer) {
      // If line numbers plugin didn't load, create manual line numbers
      createManualLineNumbers();
      return;
    }

    const lines = lineNumbersContainer.querySelectorAll('span');
    lines.forEach((line, index) => {
      const lineNumber = index + 1;
      line.addEventListener('click', () => handleLineClick(lineNumber));
      (line as HTMLElement).style.cursor = 'pointer';
      (line as HTMLElement).style.transition = 'background-color 0.2s';
      (line as HTMLElement).style.padding = '0 8px';
      
      line.addEventListener('mouseenter', () => {
        (line as HTMLElement).style.backgroundColor = 'rgba(0, 255, 65, 0.1)';
      });
      
      line.addEventListener('mouseleave', () => {
        if (gameState.selectedLine !== lineNumber) {
          (line as HTMLElement).style.backgroundColor = 'transparent';
        }
      });
    });
  };

  const createManualLineNumbers = () => {
    if (!codeRef.current) return;
    
    const code = currentChallenge.code.trim();
    const lines = code.split('\n');
    
    // Create line numbers container
    const lineNumbersContainer = document.createElement('div');
    lineNumbersContainer.className = 'manual-line-numbers';
    lineNumbersContainer.style.cssText = `
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 40px;
      background: #2d2d2d;
      border-right: 1px solid rgba(0, 255, 65, 0.3);
      padding: 1em 0;
      font-size: 14px;
      line-height: 1.5;
      text-align: center;
      color: #666;
      font-family: 'Courier New', monospace;
    `;
    
    lines.forEach((_, index) => {
      const lineNumber = index + 1;
      const lineSpan = document.createElement('span');
      lineSpan.textContent = lineNumber.toString();
      lineSpan.style.cssText = `
        display: block;
        cursor: pointer;
        padding: 0 8px;
        transition: background-color 0.2s;
        height: 1.5em;
        line-height: 1.5em;
      `;
      
      lineSpan.addEventListener('click', () => handleLineClick(lineNumber));
      lineSpan.addEventListener('mouseenter', () => {
        lineSpan.style.backgroundColor = 'rgba(0, 255, 65, 0.1)';
      });
      lineSpan.addEventListener('mouseleave', () => {
        if (gameState.selectedLine !== lineNumber) {
          lineSpan.style.backgroundColor = 'transparent';
        }
      });
      
      lineNumbersContainer.appendChild(lineSpan);
    });
    
    // Add margin to code to make space for line numbers
    codeRef.current.style.paddingLeft = '50px';
    codeRef.current.parentElement!.style.position = 'relative';
    codeRef.current.parentElement!.appendChild(lineNumbersContainer);
  };

  const handleLineClick = (lineNumber: number) => {
    if (gameState.showFeedback) return;
    
    setGameState(prev => ({
      ...prev,
      selectedLine: lineNumber,
      userAnswer: null
    }));

    // Highlight selected line
    if (codeRef.current) {
      // Try Prism line numbers first
      const lineNumbersContainer = codeRef.current.querySelector('.line-numbers-rows');
      if (lineNumbersContainer) {
        const lines = lineNumbersContainer.querySelectorAll('span');
        lines.forEach((line, index) => {
          if (index + 1 === lineNumber) {
            (line as HTMLElement).style.backgroundColor = 'rgba(0, 255, 65, 0.3)';
          } else {
            (line as HTMLElement).style.backgroundColor = 'transparent';
          }
        });
      } else {
        // Use manual line numbers
        const manualLines = codeRef.current.parentElement?.querySelectorAll('.manual-line-numbers span');
        if (manualLines) {
          manualLines.forEach((line, index) => {
            if (index + 1 === lineNumber) {
              (line as HTMLElement).style.backgroundColor = 'rgba(0, 255, 65, 0.3)';
            } else {
              (line as HTMLElement).style.backgroundColor = 'transparent';
            }
          });
        }
      }
    }
  };

  const handleVulnerabilitySelect = (vulnerability: string) => {
    if (gameState.showFeedback) return;

    setGameState(prev => ({
      ...prev,
      userAnswer: vulnerability
    }));
  };

  const handleSubmit = () => {
    if (gameState.selectedLine === null || gameState.userAnswer === null) return;

    const isLineCorrect = gameState.selectedLine === currentChallenge.vulnerableLine;
    const isVulnerabilityCorrect = gameState.userAnswer === currentChallenge.vulnerability;
    const isCorrect = isLineCorrect && isVulnerabilityCorrect;

    setGameState(prev => ({
      ...prev,
      showFeedback: true,
      correctAnswer: isCorrect,
      score: isCorrect ? prev.score + 1 : prev.score,
      attempts: prev.attempts + 1
    }));
  };

  const handleNextChallenge = () => {
    const nextIndex = gameState.currentChallengeIndex + 1;
    
    if (nextIndex >= challenges.length) {
      setGameState(prev => ({
        ...prev,
        gameComplete: true
      }));
    } else {
      setGameState(prev => ({
        ...prev,
        currentChallengeIndex: nextIndex,
        showFeedback: false,
        selectedLine: null,
        userAnswer: null,
        correctAnswer: false
      }));
    }
  };

  const handleRestart = () => {
    setGameState({
      currentChallengeIndex: 0,
      score: 0,
      totalChallenges: challenges.length,
      gameComplete: false,
      showFeedback: false,
      selectedLine: null,
      userAnswer: null,
      correctAnswer: false,
      attempts: 0
    });
  };

  const getScoreColor = () => {
    const percentage = (gameState.score / gameState.totalChallenges) * 100;
    if (percentage >= 80) return 'text-cyber-green';
    if (percentage >= 60) return 'text-yellow-400';
    return 'text-red-400';
  };

  if (gameState.gameComplete) {
    return (
      <div className="min-h-screen bg-cyber-darker py-8">
        <div className="container mx-auto px-4">
          <Card className="max-w-4xl mx-auto bg-black border-cyber-green/30 glow-effect">
            <CardHeader className="text-center bg-cyber-dark border-b border-cyber-green/30">
              <CardTitle className="text-3xl cyber-text font-mono">
                🕵️‍♀️ Audit Complete!
              </CardTitle>
            </CardHeader>
            <CardContent className="p-8 text-center">
              <div className="mb-6">
                <h3 className={`text-4xl font-bold mb-4 ${getScoreColor()}`}>
                  {gameState.score} / {gameState.totalChallenges}
                </h3>
                <p className="text-xl text-gray-300 mb-2">
                  You found {gameState.score} out of {gameState.totalChallenges} vulnerabilities
                </p>
                <p className="text-gray-400">
                  Security Score: {Math.round((gameState.score / gameState.totalChallenges) * 100)}%
                </p>
              </div>

              <div className="space-y-4">
                <p className="text-lg text-gray-300">
                  {gameState.score === gameState.totalChallenges 
                    ? "Perfect! You have a keen eye for security vulnerabilities. Ready for a career in cybersecurity!" 
                    : gameState.score >= gameState.totalChallenges * 0.7
                    ? "Great work! You caught most of the vulnerabilities. Keep practicing to become a security expert."
                    : "Good effort! Security code review takes practice. Try again to improve your skills."
                  }
                </p>

                <div className="flex justify-center space-x-4 mt-8">
                  <Button 
                    onClick={handleRestart}
                    className="bg-cyber-green text-black hover:bg-cyber-green/80 font-mono"
                  >
                    🔄 Try Again
                  </Button>
                  <Button 
                    onClick={() => navigate('/')}
                    variant="outline"
                    className="border-cyber-green/50 text-cyber-green hover:bg-cyber-green/10 font-mono"
                  >
                    🏠 Back to Home
                  </Button>
                  <Button 
                    onClick={() => window.open('https://github.com', '_blank')}
                    className="bg-cyber-blue text-white hover:bg-cyber-blue/80 font-mono"
                  >
                    💻 See My Security Projects
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-cyber-darker py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold cyber-text font-mono mb-4">
            🕵️‍♀️ Code Vulnerability Audit
          </h1>
          <div className="flex justify-center items-center space-x-6 text-sm font-mono">
            <span className="text-cyber-green">
              Challenge: {gameState.currentChallengeIndex + 1} / {gameState.totalChallenges}
            </span>
            <span className="text-gray-400">
              Score: {gameState.score}
            </span>
            <Button 
              onClick={() => navigate('/')}
              variant="outline"
              size="sm"
              className="border-cyber-green/50 text-cyber-green hover:bg-cyber-green/10"
            >
              ← Back
            </Button>
          </div>
        </div>

        {/* Main Game Area */}
        <div className="max-w-6xl mx-auto grid lg:grid-cols-3 gap-6">
          {/* Challenge Description */}
          <div className="lg:col-span-3">
            <Card className="bg-black border-cyber-green/30">
              <CardHeader className="bg-cyber-dark border-b border-cyber-green/30">
                <CardTitle className="text-cyber-green font-mono text-lg">
                  📋 Challenge Description
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                <p className="text-gray-300">{currentChallenge.description}</p>
                <p className="text-sm text-gray-400 mt-2 font-mono">
                  Click the line number containing the vulnerability, then select the vulnerability type.
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Code Editor */}
          <div className="lg:col-span-2">
            <Card className="bg-black border-cyber-green/30 glow-effect">
              <CardHeader className="bg-cyber-dark border-b border-cyber-green/30">
                <CardTitle className="text-cyber-green font-mono text-lg flex items-center">
                  <span className="mr-2">💻</span>
                  {currentChallenge.language.toUpperCase()} Code Review
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                <div className="relative">
                  <pre 
                    ref={codeRef}
                    className={`language-${currentChallenge.language} line-numbers`}
                    style={{ 
                      margin: 0, 
                      backgroundColor: '#1a1a1a',
                      fontSize: '14px',
                      lineHeight: '1.5'
                    }}
                  >
                    <code>{currentChallenge.code.trim()}</code>
                  </pre>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Interaction Panel */}
          <div className="space-y-6">
            {/* Line Selection Status */}
            <Card className="bg-black border-cyber-green/30">
              <CardHeader className="bg-cyber-dark border-b border-cyber-green/30">
                <CardTitle className="text-cyber-green font-mono text-lg">
                  🎯 Selected Line
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                <div className="text-center">
                  {gameState.selectedLine ? (
                    <span className="text-2xl font-bold text-cyber-green">
                      Line {gameState.selectedLine}
                    </span>
                  ) : (
                    <span className="text-gray-400">
                      Click a line number
                    </span>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Vulnerability Selection */}
            {gameState.selectedLine && (
              <Card className="bg-black border-cyber-green/30">
                <CardHeader className="bg-cyber-dark border-b border-cyber-green/30">
                  <CardTitle className="text-cyber-green font-mono text-lg">
                    🔍 Vulnerability Type
                  </CardTitle>
                </CardHeader>
                <CardContent className="p-4">
                  <div className="space-y-2">
                    {vulnerabilityOptions.map((option) => (
                      <Button
                        key={option}
                        onClick={() => handleVulnerabilitySelect(option)}
                        variant={gameState.userAnswer === option ? "default" : "outline"}
                        className={`w-full text-left justify-start font-mono text-sm ${
                          gameState.userAnswer === option 
                            ? "bg-cyber-green text-black" 
                            : "border-cyber-green/30 text-gray-300 hover:bg-cyber-green/10"
                        }`}
                        disabled={gameState.showFeedback}
                      >
                        {option}
                      </Button>
                    ))}
                  </div>
                  
                  {gameState.selectedLine && gameState.userAnswer && !gameState.showFeedback && (
                    <Button 
                      onClick={handleSubmit}
                      className="w-full mt-4 bg-cyber-blue text-white hover:bg-cyber-blue/80 font-mono"
                    >
                      🚀 Submit Analysis
                    </Button>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Feedback Panel */}
            {gameState.showFeedback && (
              <Card className={`border-2 ${gameState.correctAnswer ? 'border-green-400' : 'border-red-400'} bg-black glow-effect`}>
                <CardHeader className={`${gameState.correctAnswer ? 'bg-green-900/30' : 'bg-red-900/30'} border-b border-current`}>
                  <CardTitle className={`font-mono text-lg ${gameState.correctAnswer ? 'text-green-400' : 'text-red-400'}`}>
                    {gameState.correctAnswer ? '✅ Correct!' : '❌ Not Quite'}
                  </CardTitle>
                </CardHeader>
                <CardContent className="p-4">
                  {gameState.correctAnswer ? (
                    <div>
                      <p className="text-green-400 font-semibold mb-2">
                        Excellent work! You correctly identified the vulnerability.
                      </p>
                      <p className="text-gray-300 text-sm mb-4">
                        {currentChallenge.explanation}
                      </p>
                    </div>
                  ) : (
                    <div>
                      <p className="text-red-400 font-semibold mb-2">
                        {gameState.selectedLine !== currentChallenge.vulnerableLine 
                          ? `The vulnerability is actually on line ${currentChallenge.vulnerableLine}.`
                          : `The vulnerability type is "${currentChallenge.vulnerability}".`
                        }
                      </p>
                      <p className="text-gray-300 text-sm mb-4">
                        {currentChallenge.explanation}
                      </p>
                    </div>
                  )}
                  
                  <Button 
                    onClick={handleNextChallenge}
                    className="w-full bg-cyber-green text-black hover:bg-cyber-green/80 font-mono"
                  >
                    {gameState.currentChallengeIndex === challenges.length - 1 ? '🏁 Finish Audit' : '➡️ Next Challenge'}
                  </Button>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodeVulnerabilityAudit;